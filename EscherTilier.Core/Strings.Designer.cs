//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EscherTilier {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EscherTilier.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add an adjacency between the same values..
        /// </summary>
        internal static string AdjacencyList_Add_SameValues {
            get {
                return ResourceManager.GetString("AdjacencyList_Add_SameValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one part is required..
        /// </summary>
        internal static string EdgePattern_EdgePattern_OnePartRequired {
            get {
                return ResourceManager.GetString("EdgePattern_EdgePattern_OnePartRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sum of the Amount for the parts must equal 1..
        /// </summary>
        internal static string EdgePattern_EdgePattern_PartAmountEqual1 {
            get {
                return ResourceManager.GetString("EdgePattern_EdgePattern_PartAmountEqual1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumerable is too large..
        /// </summary>
        internal static string Extensions_IndexOf_TooLarge {
            get {
                return ResourceManager.GetString("Extensions_IndexOf_TooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All edge names must not be null, empty or contain only whitespace..
        /// </summary>
        internal static string ShapeTemplate_ShapeTemplate_EdgeNamesNullOrWhitespace {
            get {
                return ResourceManager.GetString("ShapeTemplate_ShapeTemplate_EdgeNamesNullOrWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There must be the same number of edges as vertices..
        /// </summary>
        internal static string ShapeTemplate_ShapeTemplate_EdgeVertexCountNotSame {
            get {
                return ResourceManager.GetString("ShapeTemplate_ShapeTemplate_EdgeVertexCountNotSame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All edge and vertex names must be unique within a shape..
        /// </summary>
        internal static string ShapeTemplate_ShapeTemplate_EdgeVertexNamesUniqe {
            get {
                return ResourceManager.GetString("ShapeTemplate_ShapeTemplate_EdgeVertexNamesUniqe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name cannot be null, empty or contain only whitespace..
        /// </summary>
        internal static string ShapeTemplate_ShapeTemplate_NameNullOrWhitespace {
            get {
                return ResourceManager.GetString("ShapeTemplate_ShapeTemplate_NameNullOrWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There must be at least 3 edges and 3 vertices in a shape..
        /// </summary>
        internal static string ShapeTemplate_ShapeTemplate_NotEnoughEdgesOrVerts {
            get {
                return ResourceManager.GetString("ShapeTemplate_ShapeTemplate_NotEnoughEdgesOrVerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All vertex names must not be null, empty or contain only whitespace..
        /// </summary>
        internal static string ShapeTemplate_ShapeTemplate_VertexNamesNullOrWhitespace {
            get {
                return ResourceManager.GetString("ShapeTemplate_ShapeTemplate_VertexNamesNullOrWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All edge and vertex names must be unique across all shapes in the template..
        /// </summary>
        internal static string Template_Template_EdgeVertexNamesUnique {
            get {
                return ResourceManager.GetString("Template_Template_EdgeVertexNamesUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one shape template is required..
        /// </summary>
        internal static string Template_Template_OneTemplateRequired {
            get {
                return ResourceManager.GetString("Template_Template_OneTemplateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one tiling is required..
        /// </summary>
        internal static string Template_Template_OneTilingRequired {
            get {
                return ResourceManager.GetString("Template_Template_OneTilingRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All shape names must be unique within this template..
        /// </summary>
        internal static string Template_Template_ShapeNamesUnique {
            get {
                return ResourceManager.GetString("Template_Template_ShapeNamesUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All tiling IDs must be unique within this template..
        /// </summary>
        internal static string Template_Template_TilingIDsUnique {
            get {
                return ResourceManager.GetString("Template_Template_TilingIDsUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all of the tilings edge patterns are defined for valid edges..
        /// </summary>
        internal static string Template_Template_UnknownEdges {
            get {
                return ResourceManager.GetString("Template_Template_UnknownEdges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All parts in the adjacency graph must be used in an edge pattern in this definition..
        /// </summary>
        internal static string TilingDefinition_TilingDefinition_AdjacentPartNotUsed {
            get {
                return ResourceManager.GetString("TilingDefinition_TilingDefinition_AdjacentPartNotUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All edge patterns must be for a different edge..
        /// </summary>
        internal static string TilingDefinition_TilingDefinition_PatternsNameUnique {
            get {
                return ResourceManager.GetString("TilingDefinition_TilingDefinition_PatternsNameUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least three edge patterns are required..
        /// </summary>
        internal static string TilingDefinition_TilingDefinition_ThreePatternsRequired {
            get {
                return ResourceManager.GetString("TilingDefinition_TilingDefinition_ThreePatternsRequired", resourceCulture);
            }
        }
    }
}
